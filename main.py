import random

import sqlalchemy
from sqlalchemy.orm import sessionmaker
from telebot import types, TeleBot, custom_filters
from telebot.handler_backends import State, StatesGroup
from telebot.storage import StateMemoryStorage

from models import create_tables, User, Vocabulary, PersonalDictionary

print('Start telegram bot...')

LOGIN = 'postgres'
PASSWORD = 'admin'
NAME_SERVER = 'localhost'
PORT_SERVER = 5432
NAME_DB = 'tg_bot'
DSN = f'postgresql://{LOGIN}:{PASSWORD}@{NAME_SERVER}:{PORT_SERVER}/{NAME_DB}'
engine = sqlalchemy.create_engine(DSN)

state_storage = StateMemoryStorage()
TOKEN_BOT = ''
bot = TeleBot(TOKEN_BOT, state_storage=state_storage)

userStep = {}
buttons = []


def initial_data(session):
    love = Vocabulary(ru_word='–õ—é–±–æ–≤—å', eng_word='Love')
    peace = Vocabulary(ru_word='–ú–∏—Ä', eng_word='Peace')
    cat = Vocabulary(ru_word='–ö–æ—à–∫–∞', eng_word='Cat')
    spring = Vocabulary(ru_word='–í–µ—Å–Ω–∞', eng_word='Spring')
    development = Vocabulary(ru_word='–†–∞–∑–≤–∏—Ç–∏–µ', eng_word='Development')
    experience = Vocabulary(ru_word='–û–ø—ã—Ç', eng_word='Experience')
    family = Vocabulary(ru_word='–°–µ–º—å—è', eng_word='Family')
    life = Vocabulary(ru_word='–ñ–∏–∑–Ω—å', eng_word='Life')
    hope = Vocabulary(ru_word='–ù–∞–¥–µ–∂–¥–∞', eng_word='Hope')
    support = Vocabulary(ru_word='–ü–æ–¥–¥–µ—Ä–∂–∫–∞', eng_word='Support')
    session.add_all(
        [love, peace, cat, spring, development,
         experience, family, life, hope, support]
    )
    session.commit()


def show_hint(*lines):
    return '\n'.join(lines)


def show_target(data):
    return f"{data['target_word']} -> {data['translate_word']}"


class Command:
    ADD_WORD = '–î–æ–±–∞–≤–∏—Ç—å —Å–ª–æ–≤–æ ‚ûï'
    DELETE_WORD = '–£–¥–∞–ª–∏—Ç—å —Å–ª–æ–≤–æüîô'
    NEXT = '–î–∞–ª—å—à–µ ‚è≠'


class MyStates(StatesGroup):
    translating_word = State()
    adding_word = State()
    deleting_word = State()


# –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç –Ω–∞–ª–∏—á–∏–µ –Ω–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
def get_user_step(cid):
    if cid in userStep:
        return True
    else:
        userStep[cid] = 0
        print("New user detected, who hasn't used \"/start\" yet")
        return False


def get_or_create_user(user_id_from_tg):
    db_user_id = None
    for user in session.query(User).\
            filter(User.id_user_tg == user_id_from_tg).all():
        db_user_id = user.id
    # —Å–æ–∑–¥–∞–Ω–∏–µ –ø–æ–ª-–ª—è –≤ –ë–î
    if not db_user_id:
        user = User(id_user_tg=user_id_from_tg)
        session.add(user)
        session.commit()
        db_user_id = user.id
    return db_user_id


# –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥, —Å–æ–∑–¥–∞–Ω–∏–µ –∏ –æ—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏–π —Å —à–∞–±–ª–æ–Ω–æ–º (–∫–ª–∞–≤–∏–∞—Ç—É—Ä–æ–π)
# —Å–æ–∑–¥–∞–Ω–∏–µ –∫–∞—Ä—Ç–æ—á–µ–∫
@bot.message_handler(commands=['cards', 'start'])
def create_cards(message):
    hello = '–ü—Ä–∏–≤–µ—Ç üëã –î–∞–≤–∞–π –ø–æ–ø—Ä–∞–∫—Ç–∏–∫—É–µ–º—Å—è –≤ –∞–Ω–≥–ª–∏–π—Å–∫–æ–º —è–∑—ã–∫–µ.' \
            '–¢—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏ –º–æ–∂–µ—à—å –ø—Ä–æ—Ö–æ–¥–∏—Ç—å –≤ —É–¥–æ–±–Ω–æ–º –¥–ª—è —Å–µ–±—è —Ç–µ–º–ø–µ.\n\n' \
            '–£ —Ç–µ–±—è –µ—Å—Ç—å –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —Ç—Ä–µ–Ω–∞–∂—ë—Ä, ' \
            '–∫–∞–∫ –∫–æ–Ω—Å—Ç—Ä—É–∫—Ç–æ—Ä, –∏ —Å–æ–±–∏—Ä–∞—Ç—å —Å–≤–æ—é —Å–æ–±—Å—Ç–≤–µ–Ω–Ω—É—é –±–∞–∑—É –¥–ª—è –æ–±—É—á–µ–Ω–∏—è. ' \
            '–î–ª—è —ç—Ç–æ–≥–æ –≤–æ—Å–ø–æ–ª—å–∑—É–π—Å—è –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–∞–º–∏:\n\n' \
            '–¥–æ–±–∞–≤–∏—Ç—å —Å–ª–æ–≤–æ ‚ûï,\n' \
            '—É–¥–∞–ª–∏—Ç—å —Å–ª–æ–≤–æ üîô.\n' \
            '–ù—É —á—Ç–æ, –Ω–∞—á–Ω—ë–º ‚¨á\nÔ∏è'
    cid = message.chat.id
    is_exist = get_user_step(cid)
    if not is_exist:
        bot.send_message(cid, hello)

    db_user_id = get_or_create_user(message.from_user.id)

    # —Å–æ–∑–¥–∞–Ω–∏–µ —à–∞–±–ª–æ–Ω–∞(–∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã) –¥–ª—è –∫–Ω–æ–ø–æ–∫
    markup = types.ReplyKeyboardMarkup(row_width=2)

    global buttons
    buttons = []
    dict_ru_eng = {}
    for word in session.query(Vocabulary).all():
        dict_ru_eng[word.eng_word] = word.ru_word
    target_word = random.choice(list(dict_ru_eng.keys()))
    translate = dict_ru_eng[target_word]
    # –¥–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É target_word
    target_word_btn = types.KeyboardButton(target_word)
    buttons.append(target_word_btn)
    # –¥–æ–±–∞–≤–ª—è–µ–º —Ä–∞–Ω–¥–æ–º–Ω—ã–µ –∫–Ω–æ–ø–∫–∏ —Å –¥—Ä—É–≥–∏–º–∏ —Å–ª–æ–≤–∞–º–∏
    del dict_ru_eng[target_word]
    others = random.sample(list(dict_ru_eng.keys()), 4)
    other_words_btns = [types.KeyboardButton(word) for word in others]
    buttons.extend(other_words_btns)
    # —Ä–∞–Ω–¥–æ–º–Ω–æ–µ —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –∫–Ω–æ–ø–æ–∫
    random.shuffle(buttons)
    # –¥–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫–∏ NEXT, ADD, DELETE
    next_btn = types.KeyboardButton(Command.NEXT)
    add_word_btn = types.KeyboardButton(Command.ADD_WORD)
    delete_word_btn = types.KeyboardButton(Command.DELETE_WORD)
    buttons.extend([next_btn, add_word_btn, delete_word_btn])
    # –¥–æ–±–∞–≤–ª—è–µ–º –≤ —à–∞–±–ª–æ–Ω (–∫–ª–∞–≤–∏–∞—Ç—É—Ä—É) –≤—Å–µ –∫–Ω–æ–ø–∫–∏
    markup.add(*buttons)

    greeting = f"–í—ã–±–µ—Ä–∏ –ø–µ—Ä–µ–≤–æ–¥ —Å–ª–æ–≤–∞:\nüá∑üá∫ {translate}"
    # –æ—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω–æ–º—É –ø–æ–ª-–ª—é —Å –∫–ª–∞–≤–∏–∞—Ç—É—Ä–æ–π
    bot.send_message(message.chat.id, greeting, reply_markup=markup)
    # —É—Å—Ç–∞–Ω–æ–≤–∫–∞ —Å–æ—Å—Ç–æ—è–Ω–∏—è –ø–æ–ª-–ª—è –≤ —á–∞—Ç–µ
    bot.set_state(
        message.from_user.id,
        MyStates.translating_word,
        message.chat.id
    )
    with bot.retrieve_data(message.from_user.id, message.chat.id) as data:
        data['target_word'] = target_word
        data['translate_word'] = translate
        data['other_words'] = others
        data['db_user_id'] = db_user_id


# –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–∞–∂–∞—Ç–∏—è –Ω–∞ –∫–Ω–æ–ø–∫—É "–¥–∞–ª—å—à–µ"
@bot.message_handler(func=lambda message: message.text == Command.NEXT)
def next_cards(message):
    create_cards(message)


# –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–∞–∂–∞—Ç–∏—è –Ω–∞ –∫–Ω–æ–ø–∫—É "—É–¥–∞–ª–∏—Ç—å"
@bot.message_handler(func=lambda message: message.text == Command.DELETE_WORD)
def delete_word(message):
    text = "–í–≤–µ–¥–∏—Ç–µ —Å–ª–æ–≤–æ –Ω–∞ —Ä—É—Å—Å–∫–æ–º —è–∑—ã–∫–µ, " \
           "–∫–æ—Ç–æ—Ä–æ–µ –í—ã —Ö–æ—Ç–µ–ª–∏ –±—ã —É–¥–∞–ª–∏—Ç—å –∏–∑ —Å–≤–æ–µ–≥–æ —Å–ª–æ–≤–∞—Ä—è: "
    # –æ—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω–æ–º—É –ø–æ–ª-–ª—é –ë–ï–ó –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã
    bot.send_message(
        message.chat.id,
        text,
        reply_markup=types.ReplyKeyboardRemove()
    )
    bot.set_state(
        message.from_user.id,
        MyStates.deleting_word,
        message.chat.id
    )


# –ø—Ä–æ—Ü–µ—Å—Å —É–¥–∞–ª–µ–Ω–∏—è —Å–ª–æ–≤–∞ –∏–∑ –ª–∏—á–Ω–æ–≥–æ —Å–ª–æ–≤–∞—Ä—è –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
@bot.message_handler(state=MyStates.deleting_word)
def process_deleting_word(message):
    word_to_delete = message.text
    id_personal_dictionary = None
    with bot.retrieve_data(message.from_user.id, message.chat.id) as data:
        db_user_id = data['db_user_id']
    for word in session.query(PersonalDictionary).\
            filter(PersonalDictionary.id_vocabulary == Vocabulary.id). \
            filter(PersonalDictionary.id_user == db_user_id). \
            filter(Vocabulary.ru_word == word_to_delete).all():
        id_personal_dictionary = word.id
    if id_personal_dictionary:
        session.query(PersonalDictionary).\
            filter(PersonalDictionary.id == id_personal_dictionary).delete()
        session.commit()
        text = f"–°–ª–æ–≤–æ '{word_to_delete}' —É–¥–∞–ª–µ–Ω–æ –∏–∑ –í–∞—à–µ–≥–æ –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω–æ–≥–æ —Å–ª–æ–≤–∞—Ä—èüëç"
        bot.send_message(
            message.chat.id,
            text,
            reply_markup=types.ReplyKeyboardRemove()
        )
        create_cards(message)
    else:
        text = "–°–ª–æ–≤–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ –≤ –≤–∞—à–µ–º —Å–ª–æ–≤–∞—Ä–µüôÉ " \
               "–í–≤–µ–¥–∏—Ç–µ —Å–ª–æ–≤–æ –Ω–∞ —Ä—É—Å—Å–∫–æ–º —è–∑—ã–∫–µ, " \
               "–∫–æ—Ç–æ—Ä–æ–µ –í—ã —Ö–æ—Ç–µ–ª–∏ –±—ã —É–¥–∞–ª–∏—Ç—å –∏–∑ —Å–≤–æ–µ–≥–æ —Å–ª–æ–≤–∞—Ä—è: "
        bot.send_message(
            message.chat.id,
            text,
            reply_markup=types.ReplyKeyboardRemove()
        )


# –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–∞–∂–∞—Ç–∏—è –Ω–∞ –∫–Ω–æ–ø–∫—É "–¥–æ–±–∞–≤–∏—Ç—å"
@bot.message_handler(func=lambda message: message.text == Command.ADD_WORD)
def add_word(message):
    text = "–í–≤–µ–¥–∏—Ç–µ —Å–ª–æ–≤–æ –Ω–∞ —Ä—É—Å—Å–∫–æ–º —è–∑—ã–∫–µ, –∫–æ—Ç–æ—Ä–æ–µ –í—ã —Ö–æ—Ç–µ–ª–∏ –±—ã –¥–æ–±–∞–≤–∏—Ç—å –≤ —Å–≤–æ–π —Å–ª–æ–≤–∞—Ä—å: "
    # –æ—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω–æ–º—É –ø–æ–ª-–ª—é –ë–ï–ó –∫–ª–∞–≤–∏–∞—Ç—É—Ä–æ–π
    bot.send_message(
        message.chat.id,
        text,
        reply_markup=types.ReplyKeyboardRemove()
    )
    bot.set_state(
        message.from_user.id,
        MyStates.adding_word,
        message.chat.id
    )


# –ø—Ä–æ—Ü–µ—Å—Å –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —Å–ª–æ–≤–∞ –∏–∑ –æ–±—â–µ–≥–æ —Å–ª–æ–≤–∞—Ä—è –≤ –ª–∏—á–Ω—ã–π —Å–ª–æ–≤–∞—Ä—å
# –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
@bot.message_handler(state=MyStates.adding_word)
def process_adding_word(message):
    new_word = message.text
    id_vocabulary = None
    for word in session.query(Vocabulary).\
            filter(Vocabulary.ru_word == new_word).all():
        id_vocabulary = word.id
    if id_vocabulary:
        with bot.retrieve_data(message.from_user.id, message.chat.id) as data:
            db_user_id = data['db_user_id']
        add_new_word = PersonalDictionary(
            id_user=db_user_id,
            id_vocabulary=id_vocabulary
        )
        session.add(add_new_word)
        session.commit()
        text = f"–°–ª–æ–≤–æ '{new_word}' –¥–æ–±–∞–≤–ª–µ–Ω–æ –≤ –í–∞—à –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–π —Å–ª–æ–≤–∞—Ä—åüëç"
        bot.send_message(
            message.chat.id,
            text,
            reply_markup=types.ReplyKeyboardRemove()
        )
        create_cards(message)
    else:
        text = "–°–ª–æ–≤–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ –≤ –Ω–∞—à–µ–º —Å–ª–æ–≤–∞—Ä–µüôÉ " \
               "–í–≤–µ–¥–∏—Ç–µ —Å–ª–æ–≤–æ –Ω–∞ —Ä—É—Å—Å–∫–æ–º —è–∑—ã–∫–µ," \
               " –∫–æ—Ç–æ—Ä–æ–µ –í—ã —Ö–æ—Ç–µ–ª–∏ –±—ã –¥–æ–±–∞–≤–∏—Ç—å –≤ —Å–≤–æ–π —Å–ª–æ–≤–∞—Ä—å: "
        bot.send_message(
            message.chat.id,
            text,
            reply_markup=types.ReplyKeyboardRemove()
        )


# –æ–±—Ä–∞–±–æ—Ç—á–∏–∫, –µ—Å–ª–∏ –ø–æ–ª-–ª—å –≤–≤–µ–ª –ª—é–±–æ–µ —Å–ª–æ–≤–æ
@bot.message_handler(func=lambda message: True, content_types=['text'])
def message_reply(message):
    cid = message.chat.id
    is_exist = get_user_step(cid)
    # –µ—Å–ª–∏ –ø–æ–ª-–ª—å –Ω–µ –≤–≤–µ–ª "/start", —Ç–æ –ø–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª—è–µ–º –µ–≥–æ –≤ –Ω–∞—á–∞–ª–æ
    if not is_exist:
        create_cards(message)
        return

    input_word = message.text
    markup = types.ReplyKeyboardMarkup(row_width=2)  # –ø—É—Å—Ç–∞—è –∫–ª–∞–≤–∏–∞—Ç—É—Ä–∞
    with bot.retrieve_data(message.from_user.id, message.chat.id) as data:
        target_word = data['target_word']
        if input_word == target_word:
            hint_text = ["–û—Ç–ª–∏—á–Ω–æ!‚ù§", show_target(data)]
            hint = show_hint(*hint_text)
        else:
            for btn in buttons:
                if btn.text == input_word:
                    btn.text = input_word + '‚ùå'
                    break
            hint = show_hint(
                f"–î–æ–ø—É—â–µ–Ω–∞ –æ—à–∏–±–∫–∞! "
                f"–ü–æ–ø—Ä–æ–±—É–π –µ—â—ë —Ä–∞–∑ –≤—Å–ø–æ–º–Ω–∏—Ç—å —Å–ª–æ–≤–æ üá∑üá∫{data['translate_word']}"
            )
    markup.add(*buttons)
    bot.send_message(message.chat.id, hint, reply_markup=markup)


if __name__ == "__main__":
    create_tables(engine)

    Session = sessionmaker(bind=engine)
    session = Session()

    initial_data(session)

    bot.add_custom_filter(custom_filters.StateFilter(bot))

    bot.infinity_polling(skip_pending=True)

    session.close()
